name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HELM_VERSION: '3.14.0'

jobs:
  # Only run release job on tag push or manual dispatch
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      packages: write
      id-token: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      chart-version: ${{ steps.version.outputs.chart-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(npm run --silent version:next)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "chart-version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update chart version
        run: |
          sed -i "s/version: .*/version: ${{ steps.version.outputs.chart-version }}/g" charts/lang-observatory/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: ${{ steps.version.outputs.version }}/g" charts/lang-observatory/Chart.yaml

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Update Helm dependencies
        run: helm dependency update ./charts/lang-observatory

      - name: Package Helm chart
        run: |
          helm package ./charts/lang-observatory
          mkdir -p dist
          mv *.tgz dist/

      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Use git log for tag-based releases
            CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          else
            CHANGELOG="Manual deployment to ${{ github.event.inputs.environment }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            ```bash
            helm repo add terragon-charts https://terragon-labs.github.io/lang-observatory
            helm install lang-observatory terragon-charts/lang-observatory --version ${{ steps.version.outputs.chart-version }}
            ```
            
            ## Verification
            ```bash
            kubectl get pods -l app.kubernetes.io/name=lang-observatory
            ```
          files: |
            dist/*.tgz
            CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

      - name: Upload chart artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart-${{ steps.version.outputs.chart-version }}
          path: dist/
          retention-days: 90

  # Deploy to staging automatically on main branch push
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://lang-observatory-staging.terragonlabs.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Download chart artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart-${{ needs.release.outputs.chart-version }}
          path: dist/

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          
          helm upgrade --install lang-observatory-staging ./dist/lang-observatory-*.tgz \
            --namespace lang-observatory-staging \
            --create-namespace \
            --values charts/lang-observatory/values-staging.yaml \
            --set image.tag=${{ needs.release.outputs.version }} \
            --set ingress.hosts[0].host=lang-observatory-staging.terragonlabs.com \
            --set ingress.tls[0].hosts[0]=lang-observatory-staging.terragonlabs.com \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Wait for rollout to complete
          kubectl rollout status deployment/lang-observatory-staging-langfuse -n lang-observatory-staging --timeout=300s
          kubectl rollout status deployment/lang-observatory-staging-grafana -n lang-observatory-staging --timeout=300s
          
          # Check pod health
          kubectl get pods -n lang-observatory-staging
          
          # Basic smoke test
          kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://lang-observatory-staging-langfuse.lang-observatory-staging.svc.cluster.local:3000/api/public/health

      - name: Run deployment tests
        run: |
          export KUBECONFIG=kubeconfig
          
          # Port forward for testing
          kubectl port-forward svc/lang-observatory-staging-langfuse 3000:3000 -n lang-observatory-staging &
          kubectl port-forward svc/lang-observatory-staging-grafana 3001:3000 -n lang-observatory-staging &
          
          sleep 10
          
          # Run E2E tests against staging
          npm run test:e2e -- --config baseURL=http://localhost:3000

  # Deploy to production manually or on tag push
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://lang-observatory.terragonlabs.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Download chart artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart-${{ needs.release.outputs.chart-version }}
          path: dist/

      - name: Pre-deployment backup
        run: |
          export KUBECONFIG=kubeconfig
          
          # Backup current state
          kubectl get all -n lang-observatory-production -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          
          helm upgrade --install lang-observatory-production ./dist/lang-observatory-*.tgz \
            --namespace lang-observatory-production \
            --create-namespace \
            --values charts/lang-observatory/values-production.yaml \
            --set image.tag=${{ needs.release.outputs.version }} \
            --set ingress.hosts[0].host=lang-observatory.terragonlabs.com \
            --set ingress.tls[0].hosts[0]=lang-observatory.terragonlabs.com \
            --wait --timeout=15m

      - name: Verify production deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Wait for rollout to complete
          kubectl rollout status deployment/lang-observatory-production-langfuse -n lang-observatory-production --timeout=600s
          kubectl rollout status deployment/lang-observatory-production-grafana -n lang-observatory-production --timeout=600s
          
          # Check pod health
          kubectl get pods -n lang-observatory-production
          
          # Health check
          kubectl run prod-health-check --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://lang-observatory-production-langfuse.lang-observatory-production.svc.cluster.local:3000/api/public/health

      - name: Run production smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          
          # Port forward for testing
          kubectl port-forward svc/lang-observatory-production-langfuse 3000:3000 -n lang-observatory-production &
          kubectl port-forward svc/lang-observatory-production-grafana 3001:3000 -n lang-observatory-production &
          
          sleep 10
          
          # Run critical path tests
          npm run test:e2e:smoke -- --config baseURL=http://localhost:3000

      - name: Create deployment notification
        if: success()
        run: |
          echo "🚀 Successfully deployed lang-observatory ${{ needs.release.outputs.version }} to production!"
          echo "📊 Dashboard: https://lang-observatory.terragonlabs.com"
          echo "📈 Monitoring: https://grafana.lang-observatory.terragonlabs.com"

      - name: Rollback on failure
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig
          
          echo "❌ Production deployment failed! Initiating rollback..."
          helm rollback lang-observatory-production -n lang-observatory-production
          
          # Wait for rollback to complete
          kubectl rollout undo deployment/lang-observatory-production-langfuse -n lang-observatory-production
          kubectl rollout status deployment/lang-observatory-production-langfuse -n lang-observatory-production --timeout=300s

  # Cleanup job for staging deployments
  cleanup-staging:
    name: Cleanup Old Staging Deployments
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Cleanup old releases
        run: |
          export KUBECONFIG=kubeconfig
          
          # Keep only the last 5 releases
          helm history lang-observatory-staging -n lang-observatory-staging --max 10 -o json | \
            jq -r '.[:-5] | .[] | .revision' | \
            xargs -I {} helm delete --revision {} lang-observatory-staging -n lang-observatory-staging || true

  # Update Helm repository
  update-helm-repo:
    name: Update Helm Repository
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pages: write
    
    steps:
      - name: Checkout helm-charts repository
        uses: actions/checkout@v4
        with:
          repository: terragon-labs/helm-charts
          token: ${{ secrets.HELM_REPO_TOKEN }}
          path: helm-charts

      - name: Download chart artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart-${{ needs.release.outputs.chart-version }}
          path: dist/

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Update Helm repository
        run: |
          cd helm-charts
          
          # Copy new chart
          cp ../dist/*.tgz .
          
          # Update index
          helm repo index . --url https://terragon-labs.github.io/helm-charts
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add lang-observatory ${{ needs.release.outputs.chart-version }}"
          git push