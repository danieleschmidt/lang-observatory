name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  HELM_VERSION: '3.14.0'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-dev.txt
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Lint JavaScript/TypeScript
        run: npm run lint

      - name: Lint Python
        run: |
          flake8 tests/python/ --max-line-length=88 --extend-ignore=E203,W503
          pylint tests/python/ --rcfile=.pylintrc || true

      - name: Lint YAML
        run: yamllint charts/ config/ -c .yamllint.yml

      - name: Lint Helm Charts
        run: |
          helm lint ./charts/lang-observatory
          helm template ./charts/lang-observatory --validate

      - name: Check formatting
        run: |
          npm run format
          black --check tests/python/
          isort --check-only tests/python/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [unit, integration, helm]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-dev.txt

      - name: Start services for integration tests
        if: matrix.test-type == 'integration'
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit
          pytest tests/python/unit/ -v -m unit --cov=tests --cov-report=xml

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          npm run test:integration
          pytest tests/python/integration/ -v -m integration

      - name: Run Helm tests
        if: matrix.test-type == 'helm'
        run: |
          npm run test:helm
          helm template ./charts/lang-observatory | kubectl apply --dry-run=client -f -

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info,./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-umbrella

      - name: Cleanup services
        if: matrix.test-type == 'integration' && always()
        run: docker-compose -f docker-compose.dev.yml down -v

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Kubesec scan
        run: |
          curl -sSX POST --data-binary @"charts/lang-observatory/templates/langfuse-deployment.yaml" \
            https://v2.kubesec.io/scan | jq .

      - name: Run Python security scan
        run: |
          bandit -r tests/python/ -f json -o bandit-report.json || true
          safety check --json || true

      - name: Run npm audit
        run: npm audit --audit-level high

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Update Helm dependencies
        run: helm dependency update ./charts/lang-observatory

      - name: Package Helm chart
        run: |
          helm package ./charts/lang-observatory
          mkdir -p dist
          mv *.tgz dist/

      - name: Generate SBOM
        run: |
          curl -Lo syft https://github.com/anchore/syft/releases/latest/download/syft_linux_amd64
          chmod +x syft
          ./syft . -o spdx-json=sbom.spdx.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: dist/
          retention-days: 30

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-dev.txt
          npx playwright install

      - name: Start full stack
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 60  # Wait for all services

      - name: Run E2E tests
        run: |
          npm run test:playwright
          pytest tests/python/e2e/ -v -m e2e

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.dev.yml down -v

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 60

      - name: Run performance tests
        run: |
          npm run test:performance
          npm run test:performance:slo-monitoring

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.dev.yml down -v

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, e2e]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' }}
        run: echo "✅ All CI checks passed successfully!"

      - name: Notify on failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          exit 1