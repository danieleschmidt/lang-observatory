# Production Docker Compose for LLM Observatory
# Comprehensive production-ready setup with all services

version: "3.8"

networks:
  llm-observatory:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  langfuse_data:
    driver: local

services:
  # Core LLM Observatory Application
  llm-observatory:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: llm-observatory-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://observatory:${POSTGRES_PASSWORD}@postgres:5432/llm_observatory
      - REDIS_URL=redis://redis:6379
      - LANGFUSE_HOST=http://langfuse:3000
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - LOG_LEVEL=info
      - ENABLE_QUANTUM_FEATURES=true
      - ENABLE_NEUROMORPHIC_PROCESSING=true
      - ENABLE_AI_OPTIMIZATION=true
      - ENABLE_ADVANCED_SECURITY=true
      - ENABLE_ENTERPRISE_FEATURES=true
      - ENABLE_HYPERSCALE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      langfuse:
        condition: service_healthy
    networks:
      - llm-observatory
      - monitoring
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: llm-observatory-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=llm_observatory
      - POSTGRES_USER=observatory
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - llm-observatory
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U observatory -d llm_observatory"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: llm-observatory-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - llm-observatory
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Langfuse for LLM Tracing
  langfuse:
    image: langfuse/langfuse:latest
    container_name: llm-observatory-langfuse
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://observatory:${POSTGRES_PASSWORD}@postgres:5432/llm_observatory
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:3001
      - TELEMETRY_ENABLED=false
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - llm-observatory
      - monitoring
    ports:
      - "3001:3000"
    volumes:
      - langfuse_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # OpenLIT for LLM Observability
  openlit:
    image: ghcr.io/openlit/openlit:latest
    container_name: llm-observatory-openlit
    restart: unless-stopped
    environment:
      - OPENLIT_TELEMETRY_DISABLED=true
      - OPENLIT_METRICS_EXPORT_INTERVAL=60
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    networks:
      - llm-observatory
      - monitoring
    ports:
      - "3002:3000"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: llm-observatory-otel
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    networks:
      - llm-observatory
      - monitoring
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8888:8888" # Prometheus metrics
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-observatory-prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: llm-observatory-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://grafana-renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - monitoring
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Grafana Image Renderer
  grafana-renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: llm-observatory-renderer
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "8081:8081"
    environment:
      - ENABLE_METRICS=true
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: llm-observatory-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - llm-observatory
      - monitoring
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - llm-observatory
      - langfuse
      - grafana
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: llm-observatory-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml:ro
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

  # Log Collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: llm-observatory-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    networks:
      - monitoring
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  # Security Scanning with Trivy
  trivy:
    image: aquasec/trivy:latest
    container_name: llm-observatory-trivy
    restart: "no"
    volumes:
      - .:/workspace:ro
      - trivy_cache:/root/.cache/trivy
    networks:
      - llm-observatory
    command: ["fs", "--security-checks", "vuln,config", "/workspace"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G

  trivy_cache:
    driver: local
