# Production Values for Lang Observatory
# Generation 3 Production Deployment Configuration

global:
  environment: production
  monitoring:
    enabled: true
    prometheusOperator: true
  security:
    enabled: true
    networkPolicies: true
    podSecurityStandards: restricted

# Langfuse Configuration
langfuse:
  enabled: true
  replicaCount: 3
  image:
    repository: langfuse/langfuse
    tag: "latest"
    pullPolicy: Always
  
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
      
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  config:
    # These should be set via secrets in production
    database:
      host: postgres-cluster.database.svc.cluster.local
      port: 5432
      name: langfuse_prod
    redis:
      host: redis-cluster.cache.svc.cluster.local
      port: 6379
      
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/rate-limit-requests-per-second: "100"
    hosts:
      - host: langfuse.langobservatory.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: langfuse-tls
        hosts:
          - langfuse.langobservatory.com

# OpenLIT Configuration  
openlit:
  enabled: true
  replicaCount: 2
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 75
    
  config:
    endpoint: "otel-collector.monitoring.svc.cluster.local:4317"
    batchSize: 1000
    flushInterval: 5s

# Prometheus Configuration
prometheus:
  enabled: true
  server:
    replicaCount: 2
    retention: "30d"
    resources:
      requests:
        cpu: 2000m
        memory: 8Gi
      limits:
        cpu: 4000m
        memory: 16Gi
        
  alertmanager:
    enabled: true
    replicaCount: 2
    
  pushgateway:
    enabled: true
    
  nodeExporter:
    enabled: true
    
  kubeStateMetrics:
    enabled: true
    
  serverFiles:
    prometheus.yml:
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
        external_labels:
          cluster: lang-observatory-prod
          environment: production
          
      scrape_configs:
        - job_name: langfuse
          static_configs:
            - targets: ['langfuse:3000']
          scrape_interval: 30s
          
        - job_name: openlit
          static_configs:
            - targets: ['openlit:8080']
          scrape_interval: 30s
          
        - job_name: llm-cost-tracker
          static_configs:
            - targets: ['llm-cost-tracker:9090']
          scrape_interval: 60s

# Grafana Configuration
grafana:
  enabled: true
  replicas: 2
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
      
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: fast-ssd
    
  admin:
    existingSecret: grafana-admin-secret
    userKey: admin-user
    passwordKey: admin-password
    
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - grafana.langobservatory.com
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.langobservatory.com
          
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true
          
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
            
  dashboards:
    default:
      llm-overview:
        file: dashboards/llm-overview.json
        
# Production Scale Manager Configuration
productionScale:
  enabled: true
  maxConcurrentRequests: 50000
  requestsPerSecond: 10000
  autoScaleThreshold: 0.75
  scaleUpCooldown: 30000
  scaleDownCooldown: 300000
  maxReplicas: 50
  minReplicas: 5
  memoryThreshold: 0.85
  cpuThreshold: 0.75

# Global Compliance Configuration
compliance:
  enabled: true
  enabledRegions: ["US", "EU", "APAC"]
  dataRetention:
    EU: 365    # GDPR requirement
    US: 1095   # 3 years CCPA
    APAC: 730  # 2 years PDPA
  anonymization: true
  auditLogging: true

# Security Configuration
security:
  networkPolicies:
    enabled: true
    denyAll: true
    
  podSecurityPolicy:
    enabled: true
    privileged: false
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    
  rbac:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["pods", "services", "configmaps", "secrets"]
        verbs: ["get", "list", "watch"]
        
# Multi-region Configuration
multiRegion:
  enabled: true
  regions:
    - name: us-east-1
      primary: true
      replicas: 10
      optimizations:
        cacheTTL: 600
        maxConcurrency: 2000
        compression: brotli
        
    - name: eu-west-1  
      primary: false
      replicas: 6
      optimizations:
        cacheTTL: 300
        maxConcurrency: 1500
        compression: gzip
        
    - name: ap-southeast-1
      primary: false
      replicas: 4
      optimizations:
        cacheTTL: 900
        maxConcurrency: 1000
        compression: gzip

# I18n Support Configuration
i18n:
  enabled: true
  supportedLocales: ["en", "es", "fr", "de", "ja", "zh"]
  defaultLocale: "en"
  
  localeOptimizations:
    en:
      modelPriority: ["gpt-4", "claude-3"]
      cacheStrategy: aggressive
    es:
      modelPriority: ["claude-3", "gpt-4"]
      cacheStrategy: moderate
    fr:
      modelPriority: ["claude-3", "gpt-4"]
      cacheStrategy: moderate
    de:
      modelPriority: ["gpt-4", "claude-3"]
      cacheStrategy: conservative
    ja:
      modelPriority: ["claude-3", "gpt-4"]
      cacheStrategy: aggressive
    zh:
      modelPriority: ["claude-3", "gpt-4"]
      cacheStrategy: aggressive

# Performance Optimizations
performance:
  enabled: true
  caching:
    redis:
      enabled: true
      cluster: true
      nodes: 6
      maxMemory: 8GB
      evictionPolicy: allkeys-lru
      
  loadBalancing:
    enabled: true
    strategy: round_robin
    healthCheck:
      enabled: true
      interval: 10s
      timeout: 5s
      
  compression:
    enabled: true
    algorithms: ["brotli", "gzip"]
    level: 6
    
# Monitoring and Alerting
monitoring:
  enabled: true
  
  alerts:
    enabled: true
    rules:
      - name: LangObservatoryHigh
        rules:
          - alert: HighErrorRate
            expr: rate(http_requests_total{code!~"2.."}[5m]) > 0.05
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              
          - alert: HighMemoryUsage
            expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High memory usage detected"
              
          - alert: DatabaseConnections
            expr: pg_stat_activity_count > 80
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High database connection count"

# Backup and Disaster Recovery
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  
  postgresql:
    enabled: true
    s3:
      bucket: lang-observatory-backups
      region: us-east-1
      
  redis:
    enabled: true
    rdb: true
    aof: true

# Resource Quotas
resourceQuotas:
  enabled: true
  
  limits:
    requests.cpu: "50"
    requests.memory: 200Gi
    limits.cpu: "100"
    limits.memory: 400Gi
    persistentvolumeclaims: "50"
    count/secrets: "100"
    count/configmaps: "100"

# Quality Gates
qualityGates:
  enabled: true
  
  tests:
    unit:
      coverage: 85
      timeout: 30s
    integration:
      coverage: 70
      timeout: 2m
    e2e:
      timeout: 5m
      
  security:
    vulnerabilityScanning: true
    policyChecking: true
    
  performance:
    p95ResponseTime: 2000  # ms
    errorRate: 0.01        # 1%
    throughput: 5000       # req/s