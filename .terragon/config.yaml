# Terragon Autonomous SDLC Value Discovery Configuration
# Repository: lang-observatory (Advanced Maturity: 85%)

meta:
  repository: "lang-observatory"
  maturity_level: "advanced"
  maturity_score: 85
  assessment_date: "2025-08-01T00:00:00Z"
  
scoring:
  # Adaptive weights for Advanced repositories (75%+ maturity)
  weights:
    advanced:
      wsjf: 0.5           # Business value still important but balanced
      ice: 0.1            # Execution confidence less critical in mature repos
      technicalDebt: 0.3  # Higher focus on debt reduction
      security: 0.1       # Security boost factor

  # Scoring thresholds and multipliers
  thresholds:
    minScore: 15          # Higher bar for advanced repos
    maxRisk: 0.7          # Lower risk tolerance
    securityBoost: 2.0    # Critical security issues get priority
    complianceBoost: 1.8  # Compliance matters for enterprise adoption
    performanceBoost: 1.5 # Performance optimization important

  # Advanced repository specific bonuses
  bonuses:
    observabilityImprovement: 1.4  # LLM observability enhancements
    helmChartOptimization: 1.3     # Kubernetes/Helm improvements
    documentationDebt: 0.8         # Lower priority - already comprehensive
    testingInfrastructure: 1.2     # Testing improvements valued

discovery:
  # Multi-source value discovery for advanced repos
  sources:
    enabled:
      - gitHistory              # Scan commit messages for debt indicators
      - staticAnalysis          # Advanced code quality analysis
      - issueTrackers          # GitHub issues, discussions
      - vulnerabilityDatabases # NVD, OSV, GitHub Advisory
      - performanceMonitoring  # Synthetic and real user monitoring
      - dependencyAnalysis     # Outdated packages, security patches
      - complianceGaps         # Regulatory and policy compliance
      - architecturalDebt      # Modernization opportunities

  # Discovery tools configuration
  tools:
    staticAnalysis:
      - eslint                 # JavaScript/TypeScript analysis
      - yamllint              # YAML configuration validation
      - helmlint              # Helm chart analysis
      - dockerlint            # Container optimization
      - kubesec               # Kubernetes security scanning
      - trivy                 # Vulnerability scanning
    
    security:
      - snyk                  # Dependency vulnerability scanning
      - dependabot            # Automated dependency updates
      - trivy                 # Container and filesystem scanning
      - kubesec               # Kubernetes security posture
      - gosec                 # Go security analysis (if applicable)
    
    performance:
      - k6                    # Load testing and performance validation
      - lighthouse            # Web performance (if applicable)
      - prometheus            # Metrics-based performance monitoring
      - grafana               # Performance visualization and alerting

  # Discovery frequency for advanced repos
  schedule:
    continuous: true          # Always-on discovery
    intervals:
      security_scan: "*/30 * * * *"    # Every 30 minutes
      dependency_check: "0 */4 * * *"  # Every 4 hours  
      static_analysis: "0 2 * * *"     # Daily at 2 AM
      performance_check: "0 6 * * 1"   # Weekly Monday 6 AM
      architecture_review: "0 4 1 * *" # Monthly on 1st at 4 AM

execution:
  # Execution constraints for advanced repos
  constraints:
    maxConcurrentTasks: 1              # One task at a time for quality
    requiresPRReview: true             # All changes need review
    autoMergeEnabled: false            # Manual approval required
    
  # Quality gates
  qualityGates:
    minTestCoverage: 85               # High coverage requirement
    maxPerformanceRegression: 3       # Max 3% performance regression
    securityVulnerabilities: 0        # Zero tolerance for high/critical vulns
    helmLintRequired: true            # Helm charts must pass lint
    
  # Rollback triggers
  rollbackTriggers:
    - testFailure
    - buildFailure  
    - securityViolation
    - performanceRegression
    - complianceViolation
    - userReportedIssue

  # Test requirements for advanced repos
  testRequirements:
    unitTests: true
    integrationTests: true
    e2eTests: true
    performanceTests: true
    securityTests: true
    chaosTests: true            # Resilience testing
    contractTests: true         # API contract validation
    
# Value calculation weights for different work types
workTypes:
  security:
    priority: "critical"
    scoreMultiplier: 3.0
    examples: ["CVE fixes", "dependency updates", "RBAC improvements"]
    
  performance:
    priority: "high"  
    scoreMultiplier: 2.0
    examples: ["query optimization", "resource efficiency", "caching"]
    
  technicalDebt:
    priority: "high"
    scoreMultiplier: 2.5
    examples: ["refactoring", "dead code removal", "architecture improvements"]
    
  compliance:
    priority: "high"
    scoreMultiplier: 2.2
    examples: ["audit requirements", "regulatory changes", "policy updates"]
    
  observability:
    priority: "medium"
    scoreMultiplier: 1.8
    examples: ["metrics improvements", "alerting enhancements", "dashboards"]
    
  documentation:
    priority: "low"
    scoreMultiplier: 0.9
    examples: ["API docs", "runbooks", "architecture updates"]
    
  testing:
    priority: "medium"
    scoreMultiplier: 1.5
    examples: ["test coverage", "test reliability", "test performance"]

# Continuous learning configuration
learning:
  enabled: true
  retentionDays: 90
  metrics:
    trackEstimationAccuracy: true
    trackValueDelivery: true  
    trackCycleTime: true
    trackDefectionRate: true
  
  feedback:
    userFeedbackWeight: 0.3
    performanceMetricsWeight: 0.4
    businessMetricsWeight: 0.3
    
  modelTuning:
    retrainingThreshold: 0.2    # Retrain if accuracy drops below 80%
    minDataPoints: 50           # Minimum executions before tuning
    adaptationRate: 0.1         # How quickly to adapt to new patterns

# Repository-specific patterns
patterns:
  # LLM/AI observability specific patterns
  llmObservability:
    costOptimization: true      # Token usage, model efficiency
    latencyOptimization: true   # Response time improvements
    accuracyMonitoring: true    # Model performance tracking
    biasDetection: true         # Fairness and bias monitoring
    
  # Kubernetes/Helm specific patterns  
  kubernetesOperations:
    resourceOptimization: true  # CPU/memory efficiency
    securityHardening: true     # Pod security, RBAC
    scalabilityImprovements: true # Auto-scaling, load handling
    availabilityEnhancements: true # Reliability, fault tolerance

# Integration settings
integrations:
  github:
    enabled: true
    org: "terragon-labs" 
    repo: "lang-observatory"
    autoCreateIssues: true
    labelPrefix: "auto-value"
    
  monitoring:
    prometheus: true
    grafana: true
    alertmanager: true
    
  notification:
    slack: false
    email: false
    webhook: false
    
# Autonomous execution settings
autonomous:
  enabled: true
  safeMode: true              # Extra validation before execution
  dryRun: false              # Actually execute (not just simulate)
  maxDailyExecutions: 5      # Limit autonomous actions per day
  humanApprovalRequired:     # Work types requiring human approval
    - "major-refactoring"
    - "security-configuration"
    - "api-breaking-changes"
    - "infrastructure-changes"